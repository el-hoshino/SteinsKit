{% set variableTypes "Variable,LazyVariable"|split:"," %}

{% for type in variableTypes %}

public final class {{ type }}<Value> {

    {% if type|contains:"Lazy" %}
    private var value: Lazy<Value> {
    {% else %}
    private var value: Value {
    {% endif %}
        didSet { runObservations() }
    }

    private var observations: Set<Observation<Value>> = []

    private var children: Set<VariableNodeContainer> = []

    public init(_ value: Value) {
        {% if type|contains:"Lazy" %}
        self.value = .initialized(value)
        {% else %}
        self.value = value
        {% endif %}
    }

    {% if type|contains:"Lazy" %}
    public init() {
        self.value = .uninitialized
    }
    {% endif %}

    {% if type|contains:"Lazy" %}
    init(lazyValue: Lazy<Value>) {
        self.value = lazyValue
    }
    {% endif %}

}

extension {{ type }} {

    private func runObservations() {

        {% if type|contains:"Lazy" %}
        guard let newValue = value.value else { return }
        {% else %}
        let newValue = value
        {% endif %}

        for child in children {
            if child.isObservationsEmpty {
                children.remove(child)
            }
        }

        for observation in observations {
            if observation.canRunObservingAction {
                observation.run(with: newValue)

            } else {
                observations.remove(observation)
            }

        }

    }

}

extension {{ type }} {

    private func addObserver <Observer: AnyObject> (_ observer: Observer,
                                                    disposer: AnyObject?,
                                                    executionMethod: ExecutionMethod,
                                                    handler: @escaping (Observer, Value) -> Void) {

        guard let disposer = disposer else { return }

        let observation = Observation(observer: observer, disposer: disposer, method: executionMethod, observingAction: handler)

        observations.insert(observation)

        {% if type|contains:"Lazy" %}
        guard let currentValue = value.value else { return }
        {% else %}
        let currentValue = value
        {% endif %}
        handler(observer, currentValue)

    }

}

extension {{ type }} {

    public var currentValue: Value{% if type|contains:"Lazy" %}?{% endif %} {
        {% if type|contains: "Lazy" %}
        return value.value
        {% else %}
        return value
        {% endif %}
    }

    public func accept(_ newValue: Value) {
        {% if type|contains: "Lazy" %}
        value = .initialized(newValue)
        {% else %}
        value = newValue
        {% endif %}
    }

    public func accept(_ calculation: (Value{% if type|contains:"Lazy" %}?{% endif %}) -> Value) {
        let newValue = calculation(currentValue)
        accept(newValue)
    }

}

extension {{ type }} {

    public func asAnyObservable() -> AnyObservable<Value> {
        return AnyObservable(self)
    }

}

extension {{ type }}: VariableNode {

    var isObservationsEmpty: Bool {
        return observations.isEmpty
    }

}

extension {{ type }}: Observable {

    public func runWithLatestValue (_ execution: (Value) -> Void) {

        {% if type|contains:"Lazy" %}
        guard let value = currentValue else { return }
        {% else %}
        let value = currentValue
        {% endif %}
        execution(value)

    }

    public func map <NewValue> (_ transform: @escaping (Value) -> NewValue) -> AnyObservable<NewValue> {

        {% if type|contains:"Lazy" %}

        let transformedValue = value.transformed(by: transform)
        let transformedVariable = LazyVariable<NewValue>(lazyValue: transformedValue)

        {% else %}

        let transformedValue = transform(value)
        let transformedVariable = Variable<NewValue>(transformedValue)

        {% endif %}

        addObserver(transformedVariable, disposer: transformedVariable, executionMethod: .directly, handler: { $0.accept(transform($1)) })

        let child = VariableNodeContainer(node: transformedVariable)
        children.insert(child)

        let wrappedVariable = AnyObservable(transformedVariable)
        return wrappedVariable

    }

    public func beObserved <Observer: AnyObject> (by observer: Observer, _ method: ExecutionMethod, disposer: AnyObject?, onChanged handler: @escaping (Observer, Value) -> Void) {

        addObserver(observer, disposer: disposer, executionMethod: method, handler: handler)

    }

}

{% endfor %}
